---
description:
globs:
alwaysApply: true
---

# About

This project is a web application that allows users to create and manage their vacation itineraries. It is a side project for me but it is a real project with real users and real data and should be treated as such. The goal of this project is to create an app that lets users create itineraries not in the traditional sense, but in a more flexible and generalizable way. I want users to be able to create itineraries for any type of trip, and to be able to share them with others as well as view lists of other itineraries if they want to see what others have done. The difference between this and other itinerary apps is that this app generalizes the concept of an itinerary to be date independent so users can create and share itineraries with other people who are on different dates. Then users can adopt an itinerary as their own by copying it and editing it to their own dates. There would be a catalog of itineraries that users can browse and adopt as their own.

Itineraries are a hierarchy of days, which can contain either groups or items. Groups can contain other groups or items. Items are the lowest level of the hierarchy. 

Some examples of groups are:
- Location

Some examples of items are:
- Activity
- Restaurant
- Hotel
- Transport

Items often have subcategories, which are used to be more specific about the type of item. For example, a hotel item might have a subcategory of check-in time, check-out time, etc.
Items also have fields that are used to store additional information about the item. For example, a hotel item might have a field for the hotel name, address, etc.

An example of an itinerary might look like this:
- Day 1
  - Group 1
    - Item 1
    - Item 2
    - Group 2
      - Item 3
      - Item 4
  - Item 5
  - Group 3
    - Item 6
- Day 2
  - Group 4
    - Item 7
    - Item 8
  - Item 9
  - Group 5
    - Item 10

# Tech Stack

- TypeScript
- Next.js
- Material UI
- Tailwind
- Drizzle
- Supabase

# Project Structure

The project is organized into the following folders:

- `src/app`: App router
- `src/components`: Shared components
- `src/hooks`: Custom hooks
- `src/server`: Server-side code
- `src/types`: TypeScript types

Not all folders are in place yet, more will be added as they are needed and make sense. If you feel like a folder is missing, ask the human for further guidance.
This is not a hard convention, but any components in the app folder shouldn't contain any actual client side code. There should be a corresponding component in the components folder that contains the client side code. What I mean is that the app folder should ONLY be used for routing and server side code.
